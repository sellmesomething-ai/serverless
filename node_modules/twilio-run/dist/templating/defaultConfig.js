"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeDefaultConfigFile = exports.templateDefaultConfigFile = void 0;
const lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const global_1 = require("../config/global");
const flags_1 = require("../flags");
const fs_1 = require("../utils/fs");
const logger_1 = require("../utils/logger");
const debug = (0, logger_1.getDebugFunction)('twilio-run:templating:defaultConfig');
const DEFAULT_RUNTIME = 'node16';
function renderDefault(config) {
    if (config.type === 'boolean') {
        if (typeof config.default === 'boolean') {
            return config.default.toString();
        }
        return 'false';
    }
    else if (config.type === 'string') {
        if (typeof config.default === 'string') {
            return `"${config.default}"`;
        }
        return 'null';
    }
    return 'null';
}
function templateFlagAsConfig([flag, config]) {
    if (flag === 'runtime' && typeof config.default !== 'string') {
        // special case for runtime with a hard coded default for a better Node.js transition
        return `\t"${(0, lodash_camelcase_1.default)(flag)}": "${DEFAULT_RUNTIME}" \t/* ${config.describe} */,`;
    }
    return `\t// "${(0, lodash_camelcase_1.default)(flag)}": ${renderDefault(config)} \t/* ${config.describe} */,`;
}
function templateDefaultConfigFile() {
    const lines = Object.entries(flags_1.ALL_FLAGS)
        .filter(([name]) => !global_1.EXCLUDED_FLAGS.includes(name))
        .sort((a, b) => a[0].localeCompare(b[0]))
        .map(templateFlagAsConfig)
        .join(os_1.default.EOL);
    return [
        '{',
        `\t"commands": {},`,
        `\t"environments": {},`,
        `\t"projects": {},`,
        lines,
        '}',
    ].join(os_1.default.EOL);
}
exports.templateDefaultConfigFile = templateDefaultConfigFile;
function writeDefaultConfigFile(baseDir, overrideExisting = false, fileName = '.twilioserverlessrc') {
    return __awaiter(this, void 0, void 0, function* () {
        const fullConfigFilePath = path_1.default.resolve(baseDir, fileName);
        const configFileExists = yield (0, fs_1.fileExists)(fullConfigFilePath, true);
        if (configFileExists && !overrideExisting) {
            return false;
        }
        const content = templateDefaultConfigFile();
        try {
            yield (0, fs_1.writeFile)(fullConfigFilePath, content, 'utf8');
            return true;
        }
        catch (err) {
            debug('Failed to write default config file. %O', err);
            return false;
        }
    });
}
exports.writeDefaultConfigFile = writeDefaultConfigFile;
