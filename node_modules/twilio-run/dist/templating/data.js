"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTemplateFiles = exports.getFiles = exports.fetchListOfTemplates = exports.CONTENT_BASE_URL = exports.TEMPLATES_URL = void 0;
const common_tags_1 = require("common-tags");
const got_1 = __importStar(require("got"));
const lodash_flatten_1 = __importDefault(require("lodash.flatten"));
const path_1 = __importDefault(require("path"));
const logger_1 = require("../utils/logger");
const debug = (0, logger_1.getDebugFunction)('twilio-run:new:template-data');
const TEMPLATE_BASE_REPO = process.env.TWILIO_SERVERLESS_TEMPLATE_REPO ||
    'twilio-labs/function-templates';
const TEMPLATE_BASE_BRANCH = process.env.TWILIO_SERVERLESS_TEMPLATE_BRANCH || 'main';
exports.TEMPLATES_URL = `https://raw.githubusercontent.com/${TEMPLATE_BASE_REPO}/${TEMPLATE_BASE_BRANCH}/templates.json`;
exports.CONTENT_BASE_URL = `https://api.github.com/repos/${TEMPLATE_BASE_REPO}/contents`;
function fetchListOfTemplates() {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, got_1.default)(exports.TEMPLATES_URL, { responseType: 'json' });
        const { templates } = response.body;
        return templates;
    });
}
exports.fetchListOfTemplates = fetchListOfTemplates;
function getFromUrl(url) {
    const headers = buildHeader();
    return (0, got_1.default)(url, {
        responseType: 'json',
        headers,
    });
}
function getNestedRepoContents(url, dirName, directory) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield getFromUrl(url);
        const repoContents = response.body;
        return (0, lodash_flatten_1.default)(yield Promise.all(repoContents.map((file) => __awaiter(this, void 0, void 0, function* () {
            if (file.type === 'dir') {
                return yield getNestedRepoContents(file.url, path_1.default.join(dirName, file.name), directory);
            }
            else {
                return {
                    name: file.name,
                    directory: dirName,
                    type: directory,
                    content: file.download_url,
                };
            }
        }))));
    });
}
function getFiles(templateId, directory) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield getFromUrl(exports.CONTENT_BASE_URL + `/${templateId}/${directory}?ref=${TEMPLATE_BASE_BRANCH}`);
        const repoContents = response.body;
        return (0, lodash_flatten_1.default)(yield Promise.all(repoContents.map((file) => __awaiter(this, void 0, void 0, function* () {
            if (file.type === 'dir') {
                return yield getNestedRepoContents(file.url, file.name, directory);
            }
            else {
                return {
                    name: file.name,
                    type: directory,
                    content: file.download_url,
                    directory: '',
                };
            }
        }))));
    });
}
exports.getFiles = getFiles;
function getTemplateFiles(templateId) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const headers = buildHeader();
            const response = yield (0, got_1.default)(exports.CONTENT_BASE_URL + `/${templateId}?ref=${TEMPLATE_BASE_BRANCH}`, {
                responseType: 'json',
                headers,
            });
            const repoContents = response.body;
            const assets = repoContents.find((file) => file.name === 'assets')
                ? getFiles(templateId, 'assets')
                : [];
            const functions = repoContents.find((file) => file.name === 'functions')
                ? getFiles(templateId, 'functions')
                : [];
            const otherFiles = repoContents
                .filter((file) => {
                return (file.name === 'package.json' ||
                    file.name === '.env' ||
                    file.name === '.env.example' ||
                    file.name === 'README.md');
            })
                .map((file) => {
                return {
                    name: file.name,
                    type: file.name,
                    content: file.download_url,
                    directory: '',
                };
            });
            const files = otherFiles.concat(...(yield Promise.all([assets, functions])));
            return files;
        }
        catch (err) {
            if (err instanceof Error || err instanceof got_1.RequestError) {
                debug(err.message);
            }
            if (err instanceof got_1.RequestError) {
                if (err.response) {
                    if (err.response.statusCode === 403) {
                        throw new Error((0, common_tags_1.stripIndent) `
            We are sorry but we failed fetching the requested template from GitHub because your IP address has been rate limited. Please try the following to resolve the issue:
  
            - Change your WiFi or make sure you are not connected to a VPN that might cause the rate limiting
  
  
            If the issue persists you can try one of the two options:
  
            - Get a GitHub developer token following https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line (no permissions needed) and add it as TWILIO_SERVERLESS_GITHUB_TOKEN to your environment variables
  
            - Wait for a few minutes up to an hour and try again.
            `);
                    }
                    else {
                        const bodyMessage = err.response.body;
                        throw new Error(bodyMessage ? `${err.message}\n${bodyMessage.message}` : err.message);
                    }
                }
            }
            throw new Error('Invalid template');
        }
    });
}
exports.getTemplateFiles = getTemplateFiles;
function buildHeader() {
    let githubToken = '';
    if (process.env.TWILIO_SERVERLESS_GITHUB_TOKEN) {
        githubToken = process.env.TWILIO_SERVERLESS_GITHUB_TOKEN;
    }
    return githubToken ? { Authorization: `token ${githubToken}` } : {};
}
