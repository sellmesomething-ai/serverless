"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCredentialsFromFlags = void 0;
const logger_1 = require("../../utils/logger");
const debug = (0, logger_1.getDebugFunction)('twilio-run:config:credentials');
/**
 * Determines the credentials by the following order of preference:
 * 1. value via explicit flags
 * If the command is twilio-run deploy
 *   2. value in .env file
 *   3. empty string
 * Else if the plugin is run from the Twilio CLI then
 *   2. value passed in through externalCliOptions if `profile` exists
 *   3. value passed in through externalCliOptions if `project` (deprecated and removed in `@twilio/cli-core` v3) exists
 *   4. value passed in through externalCliOptions
 *   5. empty string
 * @param flags Flags passed into command
 * @param envVariables Environment variables from (.env or system environment)
 * @param externalCliOptions Any external information for example passed by the Twilio CLI
 */
function getCredentialsFromFlags(flags, envVariables, externalCliOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        // default Twilio CLI credentials (4) or empty string (5)
        let username = '';
        let password = '';
        if (externalCliOptions) {
            debug('Using account credentials from Twilio CLI');
            username = externalCliOptions.username;
            password = externalCliOptions.password;
        }
        else {
            if (envVariables.ACCOUNT_SID) {
                debug('Using Account SID from env variables');
                username = envVariables.ACCOUNT_SID;
            }
            if (envVariables.AUTH_TOKEN) {
                debug('Using Auth Token from env variables');
                password = envVariables.AUTH_TOKEN;
            }
        }
        // specific flag passed. override for that flag (1)
        if (flags.username) {
            debug('Override accountSid with value from flag');
            username = flags.username;
        }
        if (flags.password) {
            debug('Override authToken with value from flag');
            password = flags.password;
        }
        return {
            username,
            password,
        };
    });
}
exports.getCredentialsFromFlags = getCredentialsFromFlags;
