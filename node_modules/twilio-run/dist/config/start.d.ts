import { EnvironmentVariables } from '@twilio-labs/serverless-api';
import { Arguments } from 'yargs';
import { ExternalCliOptions } from '../commands/shared';
import { CliInfo } from '../commands/types';
import { AllAvailableFlagTypes, SharedFlagNames } from '../flags';
import { EnvironmentVariablesWithAuth } from '../types/generic';
import { PackageJson } from 'type-fest';
type InspectInfo = {
    hostPort: string;
    break: boolean;
};
export type StartCliConfig = {
    inspect?: InspectInfo;
    baseDir: string;
    env: EnvironmentVariablesWithAuth;
    port: number;
    url: string;
    detailedLogs: boolean;
    live: boolean;
    logs: boolean;
    legacyMode: boolean;
    appName: string;
    assetsFolderName?: string;
    functionsFolderName?: string;
    forkProcess: boolean;
    pkgJson: PackageJson;
};
export type ConfigurableStartCliFlags = Pick<AllAvailableFlagTypes, SharedFlagNames | 'loadLocalEnv' | 'port' | 'ngrok' | 'logs' | 'detailedLogs' | 'live' | 'inspect' | 'inspectBrk' | 'legacyMode' | 'assetsFolder' | 'functionsFolder' | 'forkProcess'>;
export type StartCliFlags = Arguments<ConfigurableStartCliFlags & {
    dir?: string;
}>;
export type WrappedStartCliFlags = {
    flags: StartCliFlags;
};
export declare function getUrl(cli: StartCliFlags, port: string | number): Promise<string>;
export declare function getPort(cli: StartCliFlags): number;
export declare function getEnvironment(cli: StartCliFlags, baseDir: string): Promise<EnvironmentVariables>;
export declare function getBaseDirectory(cli: StartCliFlags): string;
export declare function getInspectInfo(cli: StartCliFlags): InspectInfo | undefined;
export declare function getConfigFromCli(flags: StartCliFlags, cliInfo?: CliInfo, externalCliOptions?: ExternalCliOptions): Promise<StartCliConfig>;
export {};
