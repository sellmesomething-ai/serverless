"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigFromCli = exports.getInspectInfo = exports.getBaseDirectory = exports.getEnvironment = exports.getPort = exports.getUrl = void 0;
const dotenv_1 = __importDefault(require("dotenv"));
const fs_1 = require("fs");
const path_1 = __importStar(require("path"));
const fs_2 = require("../utils/fs");
const logger_1 = require("../utils/logger");
const utils_1 = require("./utils");
const global_1 = require("./global");
const mergeFlagsAndConfig_1 = require("./utils/mergeFlagsAndConfig");
const debug = (0, logger_1.getDebugFunction)('twilio-run:cli:config');
function getUrl(cli, port) {
    return __awaiter(this, void 0, void 0, function* () {
        let url = `http://localhost:${port}`;
        if (typeof cli.ngrok !== 'undefined') {
            debug('Starting ngrok tunnel');
            const ngrokConfig = { addr: port };
            if (typeof cli.ngrok === 'string' && cli.ngrok.length > 0) {
                ngrokConfig.subdomain = cli.ngrok;
            }
            let ngrok;
            try {
                ngrok = require('ngrok');
            }
            catch (error) {
                throw new Error('ngrok could not be started because the module is not installed. Please install optional dependencies and try again.');
            }
            url = yield ngrok.connect(ngrokConfig);
            debug('ngrok tunnel URL: %s', url);
        }
        return url;
    });
}
exports.getUrl = getUrl;
function getPort(cli) {
    let port = process.env.PORT || 3000;
    if (typeof cli.port !== 'undefined') {
        port = cli.port;
        debug('Overriding port via command-line flag to %d', port);
    }
    if (typeof port === 'string') {
        port = parseInt(port, 10);
    }
    return port;
}
exports.getPort = getPort;
function getEnvironment(cli, baseDir) {
    return __awaiter(this, void 0, void 0, function* () {
        let env = {};
        if (cli.loadLocalEnv) {
            debug('Loading local environment variables');
            env = Object.assign({}, process.env);
        }
        const envFilePath = cli.env || '.env';
        const fullEnvPath = (0, path_1.resolve)(baseDir || process.cwd(), envFilePath);
        if (yield (0, fs_2.fileExists)(fullEnvPath)) {
            try {
                debug(`Read .env file at "%s"`, fullEnvPath);
                const envContent = (0, fs_1.readFileSync)(fullEnvPath, 'utf8');
                const envValues = dotenv_1.default.parse(envContent);
                for (const [key, val] of Object.entries(envValues)) {
                    env[key] = val;
                }
            }
            catch (err) {
                logger_1.logger.error('Failed to read .env file');
            }
        }
        else {
            if (cli.env) {
                logger_1.logger.error('Failed to find .env file');
            }
            debug('Not loading a .env file');
        }
        return env;
    });
}
exports.getEnvironment = getEnvironment;
function getBaseDirectory(cli) {
    let baseDir = process.cwd();
    if (cli.cwd) {
        baseDir = path_1.default.resolve(cli.cwd);
        debug('Set base directory based on input to "%s"', baseDir);
    }
    else if (cli.dir) {
        baseDir = path_1.default.resolve(cli.dir);
        debug('Set base directory based on input to "%s"', baseDir);
    }
    return baseDir;
}
exports.getBaseDirectory = getBaseDirectory;
function getInspectInfo(cli) {
    if (typeof cli.inspectBrk !== 'undefined') {
        return {
            hostPort: cli.inspectBrk,
            break: true,
        };
    }
    else if (typeof cli.inspect !== 'undefined') {
        return { hostPort: cli.inspect, break: false };
    }
    return undefined;
}
exports.getInspectInfo = getInspectInfo;
function getConfigFromCli(flags, cliInfo = { options: {} }, externalCliOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        let cwd = flags.cwd ? path_1.default.resolve(flags.cwd) : process.cwd();
        const configFlags = (0, global_1.readSpecializedConfig)(cwd, flags.config, 'start', {
            username: (externalCliOptions && externalCliOptions.accountSid) || undefined,
        });
        const cli = (0, mergeFlagsAndConfig_1.mergeFlagsAndConfig)(configFlags, flags, cliInfo);
        const config = {};
        const baseDir = getBaseDirectory(cli);
        cli.cwd = baseDir;
        const pkgJson = yield (0, utils_1.readPackageJsonContent)(cli);
        config.inspect = getInspectInfo(cli);
        config.baseDir = baseDir;
        config.env = yield getEnvironment(cli, config.baseDir);
        config.port = getPort(cli);
        config.detailedLogs = cli.detailedLogs;
        config.live = cli.live;
        config.logs = cli.logs;
        config.legacyMode = cli.legacyMode;
        config.appName = 'twilio-run';
        config.assetsFolderName = cli.assetsFolder;
        config.functionsFolderName = cli.functionsFolder;
        config.forkProcess = cli.forkProcess;
        config.pkgJson = pkgJson;
        return config;
    });
}
exports.getConfigFromCli = getConfigFromCli;
