"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigFromFlags = void 0;
const path_1 = __importDefault(require("path"));
const check_service_sid_1 = __importDefault(require("../checks/check-service-sid"));
const promote_1 = require("../commands/promote");
const utils_1 = require("../commands/utils");
const utils_2 = require("../serverless-api/utils");
const global_1 = require("./global");
const utils_3 = require("./utils");
const mergeFlagsAndConfig_1 = require("./utils/mergeFlagsAndConfig");
const userAgentExtensions_1 = require("./utils/userAgentExtensions");
function getConfigFromFlags(flags, externalCliOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        let cwd = flags.cwd ? path_1.default.resolve(flags.cwd) : process.cwd();
        flags.cwd = cwd;
        if (flags.production) {
            flags.environment = '';
        }
        const configFlags = (0, global_1.readSpecializedConfig)(cwd, flags.config, 'promote', {
            username: flags.username ||
                (externalCliOptions && externalCliOptions.accountSid) ||
                undefined,
            environmentSuffix: flags.environment,
            region: flags.region,
        });
        flags = (0, mergeFlagsAndConfig_1.mergeFlagsAndConfig)(configFlags, flags, promote_1.cliInfo);
        cwd = flags.cwd || cwd;
        const { localEnv: envVariables } = yield (0, utils_3.readLocalEnvFile)(flags);
        const { username, password } = yield (0, utils_3.getCredentialsFromFlags)(flags, envVariables, externalCliOptions);
        const env = (0, utils_3.filterEnvVariablesForDeploy)(envVariables);
        const command = (0, utils_1.getFullCommand)(flags);
        const potentialServiceSid = flags.serviceSid ||
            (yield (0, utils_2.getFunctionServiceSid)(cwd, flags.config, 'promote', ((_a = flags.username) === null || _a === void 0 ? void 0 : _a.startsWith('AC'))
                ? flags.username
                : username.startsWith('AC')
                    ? username
                    : externalCliOptions === null || externalCliOptions === void 0 ? void 0 : externalCliOptions.accountSid, flags.region));
        const serviceSid = (0, check_service_sid_1.default)(command, potentialServiceSid);
        const region = flags.region;
        const edge = flags.edge;
        const outputFormat = flags.outputFormat || (externalCliOptions === null || externalCliOptions === void 0 ? void 0 : externalCliOptions.outputFormat);
        return {
            cwd,
            username,
            password,
            serviceSid,
            force: flags.force,
            createEnvironment: flags.createEnvironment,
            buildSid: flags.buildSid,
            targetEnvironment: flags.environment,
            sourceEnvironment: flags.sourceEnvironment,
            region,
            edge,
            env,
            userAgentExtensions: (0, userAgentExtensions_1.getUserAgentExtensions)('promote', externalCliOptions),
            outputFormat,
        };
    });
}
exports.getConfigFromFlags = getConfigFromFlags;
