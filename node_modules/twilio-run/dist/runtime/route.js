"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.functionToRoute = exports.functionPathToRoute = exports.handleSuccess = exports.isTwiml = exports.handleError = exports.constructGlobalScope = exports.constructContext = exports.constructEvent = void 0;
const child_process_1 = require("child_process");
const path_1 = require("path");
const serialize_error_1 = require("serialize-error");
const twilio_1 = __importStar(require("twilio"));
const check_account_sid_1 = require("../checks/check-account-sid");
const check_auth_token_1 = require("../checks/check-auth-token");
const error_html_1 = require("../utils/error-html");
const logger_1 = require("../utils/logger");
const clean_up_1 = require("../utils/stack-trace/clean-up");
const response_1 = require("./internal/response");
const Runtime = __importStar(require("./internal/runtime"));
const RUNNER_PATH = process.env.NODE_ENV === 'test'
    ? (0, path_1.resolve)(__dirname, '../../dist/runtime/internal/functionRunner')
    : (0, path_1.join)(__dirname, 'internal', 'functionRunner');
const { VoiceResponse, MessagingResponse, FaxResponse } = twilio_1.twiml;
const debug = (0, logger_1.getDebugFunction)('twilio-run:route');
function constructEvent(req) {
    return Object.assign(Object.assign({}, req.query), req.body);
}
exports.constructEvent = constructEvent;
function constructContext({ url, env }, functionPath) {
    function getTwilioClient() {
        (0, check_account_sid_1.checkForValidAccountSid)(env.ACCOUNT_SID, {
            shouldPrintMessage: true,
            shouldThrowError: true,
            functionName: 'context.getTwilioClient()',
        });
        (0, check_auth_token_1.checkForValidAuthToken)(env.AUTH_TOKEN, {
            shouldPrintMessage: true,
            shouldThrowError: true,
            functionName: 'context.getTwilioClient()',
        });
        return (0, twilio_1.default)(env.ACCOUNT_SID, env.AUTH_TOKEN);
    }
    const DOMAIN_NAME = url.replace(/^https?:\/\//, '');
    const PATH = functionPath;
    return Object.assign(Object.assign({ PATH, DOMAIN_NAME }, env), { getTwilioClient });
}
exports.constructContext = constructContext;
function constructGlobalScope(config) {
    const GlobalRuntime = Runtime.create(config);
    global['Twilio'] = Object.assign(Object.assign({}, twilio_1.default), { Response: response_1.Response });
    global['Runtime'] = GlobalRuntime;
    global['Functions'] = GlobalRuntime.getFunctions();
    global['Response'] = response_1.Response;
    if ((0, check_account_sid_1.checkForValidAccountSid)(config.env.ACCOUNT_SID) &&
        config.env.AUTH_TOKEN) {
        global['twilioClient'] = (0, twilio_1.default)(config.env.ACCOUNT_SID, config.env.AUTH_TOKEN);
    }
}
exports.constructGlobalScope = constructGlobalScope;
function isError(obj) {
    return obj instanceof Error;
}
function handleError(err, req, res, functionFilePath) {
    res.status(500);
    if (isError(err)) {
        const cleanedupError = (0, clean_up_1.cleanUpStackTrace)(err);
        if (req.useragent && (req.useragent.isDesktop || req.useragent.isMobile)) {
            res.type('text/html');
            res.send((0, error_html_1.wrapErrorInHtml)(cleanedupError, functionFilePath));
        }
        else {
            res.send({
                message: cleanedupError.message,
                name: cleanedupError.name,
                stack: cleanedupError.stack,
            });
        }
    }
    else {
        res.send(err);
    }
}
exports.handleError = handleError;
function isTwiml(obj) {
    const isVoiceTwiml = obj instanceof VoiceResponse;
    const isMessagingTwiml = obj instanceof MessagingResponse;
    const isFaxTwiml = obj instanceof FaxResponse;
    return isVoiceTwiml || isMessagingTwiml || isFaxTwiml;
}
exports.isTwiml = isTwiml;
function handleSuccess(responseObject, res) {
    res.status(200);
    if (typeof responseObject === 'string') {
        debug('Sending basic string response');
        res.type('text/plain').send(responseObject);
        return;
    }
    if (responseObject &&
        typeof responseObject === 'object' &&
        isTwiml(responseObject)) {
        debug('Sending TwiML response as XML string');
        res.type('text/xml').send(responseObject.toString());
        return;
    }
    if (responseObject && responseObject instanceof response_1.Response) {
        debug('Sending custom response');
        responseObject.applyToExpressResponse(res);
        return;
    }
    debug('Sending JSON response');
    res.send(responseObject);
}
exports.handleSuccess = handleSuccess;
function functionPathToRoute(functionPath, config) {
    return function twilioFunctionHandler(req, res, next) {
        const event = constructEvent(req);
        const forked = (0, child_process_1.fork)(RUNNER_PATH);
        forked.on('message', ({ err, reply, debugMessage, debugArgs = [], }) => {
            if (debugMessage) {
                debug(debugMessage, ...debugArgs);
                return;
            }
            if (err) {
                const error = (0, serialize_error_1.deserializeError)(err);
                handleError(error, req, res, functionPath);
            }
            if (reply) {
                res.status(reply.statusCode);
                res.set(reply.headers);
                res.send(reply.body);
            }
            forked.kill();
        });
        forked.send({ functionPath, event, config, path: req.path });
    };
}
exports.functionPathToRoute = functionPathToRoute;
function functionToRoute(fn, config, functionFilePath) {
    return function twilioFunctionHandler(req, res, next) {
        const event = constructEvent(req);
        debug('Event for %s: %o', req.path, event);
        const context = constructContext(config, req.path);
        debug('Context for %s: %p', req.path, context);
        let run_timings = {
            start: [0, 0],
            end: [0, 0],
        };
        const callback = function callback(err, payload) {
            run_timings.end = process.hrtime();
            debug('Function execution %s finished', req.path);
            debug(`(Estimated) Total Execution Time: ${(run_timings.end[0] * 1e9 +
                run_timings.end[1] -
                (run_timings.start[0] * 1e9 + run_timings.start[1])) /
                1e6}ms`);
            if (err) {
                handleError(err, req, res, functionFilePath);
                return;
            }
            handleSuccess(payload, res);
        };
        debug('Calling function for %s', req.path);
        try {
            run_timings.start = process.hrtime();
            fn(context, event, callback);
        }
        catch (err) {
            callback(err);
        }
    };
}
exports.functionToRoute = functionToRoute;
