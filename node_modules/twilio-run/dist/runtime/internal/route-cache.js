"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCachedResources = exports.getRoutes = exports.setRoutes = exports.getRouteMap = void 0;
const runtime_paths_1 = require("./runtime-paths");
const allRoutes = new Map();
const assetsCache = new Set();
const functionsCache = new Set();
function getRouteMap(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const searchConfig = {};
        if (config.functionsFolderName) {
            searchConfig.functionsFolderNames = [config.functionsFolderName];
        }
        if (config.assetsFolderName) {
            searchConfig.assetsFolderNames = [config.assetsFolderName];
        }
        let routes = yield (0, runtime_paths_1.getFunctionsAndAssets)(config.baseDir, searchConfig);
        return setRoutes(routes);
    });
}
exports.getRouteMap = getRouteMap;
function setRoutes({ functions, assets }) {
    allRoutes.clear();
    assetsCache.clear();
    functionsCache.clear();
    functions.forEach((fn) => {
        if (!fn.path) {
            return;
        }
        if (allRoutes.has(fn.path)) {
            throw new Error(`Duplicate. Path ${fn.path} already exists`);
        }
        functionsCache.add(fn);
        allRoutes.set(fn.path, Object.assign(Object.assign({}, fn), { type: 'function' }));
    });
    assets.forEach((asset) => {
        if (!asset.path) {
            return;
        }
        if (allRoutes.has(asset.path)) {
            throw new Error(`Duplicate. Path ${asset.path} already exists`);
        }
        assetsCache.add(asset);
        allRoutes.set(asset.path, Object.assign(Object.assign({}, asset), { type: 'asset' }));
    });
    return new Map(allRoutes);
}
exports.setRoutes = setRoutes;
function getRoutes() {
    return new Map(allRoutes);
}
exports.getRoutes = getRoutes;
function getCachedResources() {
    return {
        assets: Array.from(assetsCache),
        functions: Array.from(functionsCache),
    };
}
exports.getCachedResources = getCachedResources;
