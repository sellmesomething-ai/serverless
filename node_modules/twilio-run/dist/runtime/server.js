"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runServer = exports.createServer = exports.createLocalDevelopmentServer = void 0;
const body_parser_1 = __importDefault(require("body-parser"));
const chokidar_1 = __importDefault(require("chokidar"));
const express_1 = __importDefault(require("express"));
const express_useragent_1 = __importDefault(require("express-useragent"));
const lodash_debounce_1 = __importDefault(require("lodash.debounce"));
const nocache_1 = __importDefault(require("nocache"));
const path_1 = __importDefault(require("path"));
const start_1 = require("../printers/start");
const error_html_1 = require("../utils/error-html");
const logger_1 = require("../utils/logger");
const output_1 = require("../utils/output");
const requireFromProject_1 = require("../utils/requireFromProject");
const request_logger_1 = require("./internal/request-logger");
const route_cache_1 = require("./internal/route-cache");
const runtime_paths_1 = require("./internal/runtime-paths");
const route_1 = require("./route");
const debug = (0, logger_1.getDebugFunction)('twilio-run:server');
const DEFAULT_PORT = process.env.PORT || 3000;
const RELOAD_DEBOUNCE_MS = 250;
const DEFAULT_BODY_SIZE_LAMBDA = '6mb';
function loadTwilioFunction(fnPath) {
    return require(fnPath).handler;
}
function requireCacheCleaner(req, res, next) {
    debug('Deleting require cache');
    Object.keys(require.cache).forEach((key) => {
        // Entries in the cache that end with .node are compiled binaries, deleting
        // those has unspecified results, so we keep them.
        // Entries in the cache that include "twilio-run" are part of this module
        // or its dependencies, so don't need to be cleared.
        if (!(key.endsWith('.node') || key.includes('twilio-run'))) {
            delete require.cache[key];
        }
    });
    next();
}
function findRoutes(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const searchConfig = {};
        if (config.functionsFolderName) {
            searchConfig.functionsFolderNames = [config.functionsFolderName];
        }
        if (config.assetsFolderName) {
            searchConfig.assetsFolderNames = [config.assetsFolderName];
        }
        return (0, runtime_paths_1.getFunctionsAndAssets)(config.baseDir, searchConfig);
    });
}
function configureWatcher(config, server) {
    const watcher = chokidar_1.default.watch([
        path_1.default.join(config.baseDir, config.functionsFolderName
            ? `/(${config.functionsFolderName})/**/*)`
            : '/(functions|src)/**/*.js'),
        path_1.default.join(config.baseDir, config.assetsFolderName
            ? `/(${config.assetsFolderName})/**/*)`
            : '/(assets|static)/**/*'),
    ], {
        ignoreInitial: true,
    });
    const reloadRoutes = () => __awaiter(this, void 0, void 0, function* () {
        const routes = yield findRoutes(config);
        server.update(routes);
    });
    // Debounce so we don't needlessly reload when multiple files are changed
    const debouncedReloadRoutes = (0, lodash_debounce_1.default)(reloadRoutes, RELOAD_DEBOUNCE_MS);
    watcher
        .on('add', (path) => {
        debug(`Reloading Routes: add @ ${path}`);
        debouncedReloadRoutes();
    })
        .on('unlink', (path) => {
        debug(`Reloading Routes: unlink @ ${path}`);
        debouncedReloadRoutes();
    });
    // Clean the watcher up when exiting.
    process.on('exit', () => watcher.close());
}
function createLocalDevelopmentServer(port = DEFAULT_PORT, config) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const { LocalDevelopmentServer } = (0, requireFromProject_1.requireFromProject)(config.baseDir, '@twilio/runtime-handler/dev');
            const routes = yield findRoutes(config);
            const server = new LocalDevelopmentServer(port, {
                inspect: config.inspect,
                baseDir: config.baseDir,
                env: config.env,
                port: config.port,
                url: config.url,
                detailedLogs: config.detailedLogs,
                live: config.live,
                logs: config.logs,
                legacyMode: config.legacyMode,
                appName: config.appName,
                forkProcess: config.forkProcess,
                logger: logger_1.logger,
                routes: routes,
                enableDebugLogs: logger_1.logger.config.level === logger_1.LoggingLevel.debug,
            });
            server.on('request-log', (logMessage) => {
                (0, output_1.writeOutput)(logMessage);
            });
            server.on('updated-routes', (config) => __awaiter(this, void 0, void 0, function* () {
                yield (0, start_1.printRouteInfo)(config);
            }));
            configureWatcher(config, server);
            return server.getApp();
        }
        catch (err) {
            debug('Failed to load server from @twilio/runtime-handler/dev. Falling back to built-in.');
            return createServer(port, config);
        }
    });
}
exports.createLocalDevelopmentServer = createLocalDevelopmentServer;
/** @deprecated */
function createServer(port = DEFAULT_PORT, config) {
    return __awaiter(this, void 0, void 0, function* () {
        config = Object.assign(Object.assign({}, config), { url: config.url || `http://localhost:${port}`, baseDir: config.baseDir || process.cwd() });
        debug('Starting server with config: %p', config);
        const app = (0, express_1.default)();
        app.use(express_useragent_1.default.express());
        app.use(body_parser_1.default.urlencoded({ extended: false, limit: DEFAULT_BODY_SIZE_LAMBDA }));
        app.use(body_parser_1.default.json({ limit: DEFAULT_BODY_SIZE_LAMBDA }));
        app.get('/favicon.ico', (req, res) => {
            res.redirect('https://www.twilio.com/marketing/bundles/marketing/img/favicons/favicon.ico');
        });
        if (config.logs) {
            app.use((0, request_logger_1.createLogger)(config));
        }
        if (config.live) {
            app.use((0, nocache_1.default)());
            app.use(requireCacheCleaner);
        }
        if (config.legacyMode) {
            process.env.TWILIO_FUNCTIONS_LEGACY_MODE = config.legacyMode
                ? 'true'
                : undefined;
            debug('Legacy mode enabled');
            app.use('/assets/*', (req, res, next) => {
                req.path = req.path.replace('/assets/', '/');
                next();
            });
        }
        let routeMap = yield (0, route_cache_1.getRouteMap)(config);
        if (config.live) {
            const watcher = chokidar_1.default.watch([
                path_1.default.join(config.baseDir, '/(functions|src)/**/*.js'),
                path_1.default.join(config.baseDir, '/(assets|static)/**/*'),
            ], {
                ignoreInitial: true,
            });
            const reloadRoutes = () => __awaiter(this, void 0, void 0, function* () {
                routeMap = yield (0, route_cache_1.getRouteMap)(config);
                yield (0, start_1.printRouteInfo)(config);
            });
            // Debounce so we don't needlessly reload when multiple files are changed
            const debouncedReloadRoutes = (0, lodash_debounce_1.default)(reloadRoutes, RELOAD_DEBOUNCE_MS);
            watcher
                .on('add', (path) => {
                debug(`Reloading Routes: add @ ${path}`);
                debouncedReloadRoutes();
            })
                .on('unlink', (path) => {
                debug(`Reloading Routes: unlink @ ${path}`);
                debouncedReloadRoutes();
            });
            // Clean the watcher up when exiting.
            process.on('exit', () => watcher.close());
        }
        (0, route_1.constructGlobalScope)(config);
        app.set('port', port);
        app.all('/*', (req, res, next) => {
            let routeInfo = routeMap.get(req.path);
            if (!routeInfo && req.path === '/') {
                // In production we automatically fall back to the contents of /assets/index.html
                debug('Falling back to /assets/index.html');
                routeInfo = routeMap.get('/assets/index.html');
            }
            if (req.method === 'OPTIONS' && routeInfo) {
                res.set({
                    'access-control-allow-origin': '*',
                    'access-control-allow-headers': 'Accept, Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, User-Agent',
                    'access-control-allow-methods': 'GET, POST, OPTIONS',
                    'access-control-expose-headers': 'ETag',
                    'access-control-max-age': '86400',
                    'access-control-allow-credentials': true,
                    'content-type': 'text/plain; charset=UTF-8',
                    'content-length': '0',
                });
                res.status(204).end();
                return;
            }
            if (routeInfo && routeInfo.type === 'function') {
                const functionPath = routeInfo.filePath;
                try {
                    if (!functionPath) {
                        throw new Error('Missing function path');
                    }
                    if (config.forkProcess) {
                        (0, route_1.functionPathToRoute)(functionPath, config)(req, res, next);
                    }
                    else {
                        debug('Load & route to function at "%s"', functionPath);
                        const twilioFunction = loadTwilioFunction(functionPath);
                        if (typeof twilioFunction !== 'function') {
                            return res
                                .status(404)
                                .send(`Could not find a "handler" function in file ${functionPath}`);
                        }
                        (0, route_1.functionToRoute)(twilioFunction, config, functionPath)(req, res, next);
                    }
                }
                catch (err) {
                    debug('Failed to retrieve function. %O', err);
                    if (err.code === 'ENOENT') {
                        res.status(404).send(`Could not find function ${functionPath}`);
                    }
                    else {
                        res.status(500).send((0, error_html_1.wrapErrorInHtml)(err, functionPath));
                    }
                }
            }
            else if (routeInfo && routeInfo.type === 'asset') {
                if (routeInfo.filePath) {
                    if (routeInfo.access === 'private') {
                        res.status(403).send('This asset has been marked as private');
                    }
                    else {
                        res.sendFile(routeInfo.filePath);
                    }
                }
                else {
                    res.status(404).send('Could not find asset');
                }
            }
            else {
                res.status(404).send('Could not find requested resource');
            }
        });
        return app;
    });
}
exports.createServer = createServer;
function runServer(port = DEFAULT_PORT, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const app = yield createServer(port, config);
        return new Promise((resolve) => {
            app.listen(port);
            resolve(app);
        });
    });
}
exports.runServer = runServer;
