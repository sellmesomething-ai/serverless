"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRelevantFlags = exports.ALL_FLAGS = exports.BASE_API_FLAG_NAMES = exports.sharedApiRelatedCliOptions = exports.BASE_CLI_FLAG_NAMES = exports.baseCliOptions = void 0;
const logger_1 = require("./utils/logger");
exports.baseCliOptions = {
    'log-level': {
        type: 'string',
        default: 'info',
        alias: 'l',
        describe: 'Level of logging messages.',
        choices: Object.keys(logger_1.LoggingLevel),
    },
    config: {
        alias: 'c',
        type: 'string',
        describe: 'Location of the config file. Absolute path or relative to current working directory (cwd)',
    },
    cwd: {
        type: 'string',
        describe: 'Sets the directory of your existing Serverless project. Defaults to current directory',
    },
    env: {
        type: 'string',
        describe: 'Path to .env file for environment variables that should be installed',
    },
};
exports.BASE_CLI_FLAG_NAMES = Object.keys(exports.baseCliOptions);
exports.sharedApiRelatedCliOptions = {
    region: {
        type: 'string',
        hidden: true,
        describe: 'Twilio API Region',
    },
    edge: {
        type: 'string',
        hidden: true,
        describe: 'Twilio API Region',
    },
    username: {
        type: 'string',
        alias: 'u',
        describe: 'A specific API key or account SID to be used for deployment. Uses fields in .env otherwise',
    },
    password: {
        type: 'string',
        describe: 'A specific API secret or auth token for deployment. Uses fields from .env otherwise',
    },
    'load-system-env': {
        default: false,
        type: 'boolean',
        describe: 'Uses system environment variables as fallback for variables specified in your .env file. Needs to be used with --env explicitly specified.',
    },
};
exports.BASE_API_FLAG_NAMES = Object.keys(exports.sharedApiRelatedCliOptions);
exports.ALL_FLAGS = Object.assign(Object.assign(Object.assign({}, exports.baseCliOptions), exports.sharedApiRelatedCliOptions), { 'service-sid': {
        type: 'string',
        describe: 'SID of the Twilio Serverless Service to deploy to',
    }, 'build-sid': {
        type: 'string',
        alias: 'from-build',
        describe: 'An existing Build SID to deploy to the new environment',
    }, 'source-environment': {
        type: 'string',
        alias: 'from',
        describe: 'SID or suffix of an existing environment you want to deploy from.',
    }, environment: {
        type: 'string',
        alias: 'to',
        describe: 'The environment name (domain suffix) you want to use for your deployment. Alternatively you can specify an environment SID starting with ZE.',
        default: 'dev',
    }, production: {
        type: 'boolean',
        describe: 'Promote build to the production environment (no domain suffix). Overrides environment flag',
        default: false,
    }, 'create-environment': {
        type: 'boolean',
        describe: "Creates environment if it couldn't find it.",
        default: false,
    }, force: {
        type: 'boolean',
        describe: 'Will run deployment in force mode. Can be dangerous.',
        default: false,
    }, 'service-name': {
        type: 'string',
        alias: 'n',
        describe: 'Overrides the name of the Serverless project. Default: the name field in your package.json',
    }, functions: {
        type: 'boolean',
        describe: 'Upload functions. Can be turned off with --no-functions',
        default: true,
    }, assets: {
        type: 'boolean',
        describe: 'Upload assets. Can be turned off with --no-assets',
        default: true,
    }, 'assets-folder': {
        type: 'string',
        describe: 'Specific folder name to be used for static assets',
    }, 'functions-folder': {
        type: 'string',
        describe: 'Specific folder name to be used for static functions',
    }, 'override-existing-project': {
        type: 'boolean',
        describe: 'Deploys Serverless project to existing service if a naming conflict has been found.',
        default: false,
    }, properties: {
        type: 'string',
        describe: 'Specify the output properties you want to see. Works best on single types',
        hidden: true,
    }, 'extended-output': {
        type: 'boolean',
        describe: 'Show an extended set of properties on the output',
        default: false,
    }, 'function-sid': {
        type: 'string',
        describe: 'Specific Function SID to retrieve logs for',
    }, tail: {
        type: 'boolean',
        describe: 'Continuously stream the logs',
    }, 'output-format': {
        type: 'string',
        alias: 'o',
        default: '',
        describe: 'Output the results in a different format',
        choices: ['', 'json'],
    }, 'log-cache-size': {
        type: 'number',
        hidden: true,
        describe: 'Tailing the log endpoint will cache previously seen entries to avoid duplicates. The cache is topped at a maximum of 1000 by default. This option can change that.',
    }, template: {
        type: 'string',
        description: 'Name of template to be used',
    }, 'load-local-env': {
        alias: 'f',
        default: false,
        type: 'boolean',
        describe: 'Includes the local environment variables',
    }, port: {
        alias: 'p',
        type: 'string',
        describe: 'Override default port of 3000',
        default: '3000',
        requiresArg: true,
    }, ngrok: {
        type: 'string',
        describe: 'Uses ngrok to create a public url. Pass a string to set the subdomain (requires a paid-for ngrok account).',
    }, logs: {
        type: 'boolean',
        default: true,
        describe: 'Toggles request logging',
    }, 'detailed-logs': {
        type: 'boolean',
        default: false,
        describe: 'Toggles detailed request logging by showing request body and query params',
    }, live: {
        type: 'boolean',
        default: true,
        describe: 'Always serve from the current functions (no caching)',
    }, inspect: {
        type: 'string',
        describe: 'Enables Node.js debugging protocol',
    }, 'inspect-brk': {
        type: 'string',
        describe: 'Enables Node.js debugging protocol, stops execution until debugger is attached',
    }, 'legacy-mode': {
        type: 'boolean',
        describe: 'Enables legacy mode, it will prefix your asset paths with /assets',
    }, 'fork-process': {
        type: 'boolean',
        describe: 'Disable forking function processes to emulate production environment',
        default: true,
    }, runtime: {
        type: 'string',
        describe: 'The version of Node.js to deploy the build to. (node16)',
    }, key: {
        type: 'string',
        describe: 'Name of the environment variable',
        demandOption: true,
    }, value: {
        type: 'string',
        describe: 'Name of the environment variable',
        demandOption: true,
    }, 'show-values': {
        type: 'boolean',
        describe: 'Show the values of your environment variables',
        default: false,
    } });
function getRelevantFlags(flags) {
    return flags.reduce((current, flagName) => {
        return Object.assign(Object.assign({}, current), { [flagName]: Object.assign({}, exports.ALL_FLAGS[flagName]) });
    }, {});
}
exports.getRelevantFlags = getRelevantFlags;
