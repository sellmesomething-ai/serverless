"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDirContent = exports.downloadFile = exports.fileExistsSync = exports.fileExists = exports.mkdir = exports.readdir = exports.writeFile = exports.readFile = void 0;
const fs_1 = __importDefault(require("fs"));
const got_1 = __importDefault(require("got"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const access = (0, util_1.promisify)(fs_1.default.access);
exports.readFile = (0, util_1.promisify)(fs_1.default.readFile);
exports.writeFile = (0, util_1.promisify)(fs_1.default.writeFile);
exports.readdir = (0, util_1.promisify)(fs_1.default.readdir);
exports.mkdir = (0, util_1.promisify)(fs_1.default.mkdir);
const stat = (0, util_1.promisify)(fs_1.default.stat);
const open = (0, util_1.promisify)(fs_1.default.open);
const READ_ONLY = fs_1.default.constants.R_OK;
const READ_WRITE = fs_1.default.constants.R_OK | fs_1.default.constants.W_OK;
function fileExists(filePath, hasWriteAccess = false) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield access(filePath, hasWriteAccess ? READ_WRITE : READ_ONLY);
            return true;
        }
        catch (err) {
            return false;
        }
    });
}
exports.fileExists = fileExists;
function fileExistsSync(filePath, hasWriteAccess = false) {
    try {
        fs_1.default.accessSync(filePath, hasWriteAccess ? READ_WRITE : READ_ONLY);
        return true;
    }
    catch (err) {
        return false;
    }
}
exports.fileExistsSync = fileExistsSync;
function downloadFile(contentUrl, targetPath) {
    return new Promise((resolve, reject) => {
        return (0, exports.mkdir)(path_1.default.dirname(targetPath), { recursive: true })
            .then(() => open(targetPath, 'wx'))
            .then((fd) => {
            const writeStream = fs_1.default.createWriteStream('', { fd });
            got_1.default
                .stream(contentUrl)
                .on('response', resolve)
                .on('error', reject)
                .pipe(writeStream);
        })
            .catch((err) => reject(err));
    });
}
exports.downloadFile = downloadFile;
function getDirContent(dir, ext) {
    return __awaiter(this, void 0, void 0, function* () {
        const rawFiles = yield (0, exports.readdir)(dir);
        return (yield Promise.all(rawFiles.map((file) => __awaiter(this, void 0, void 0, function* () {
            const filePath = path_1.default.join(dir, file);
            const entry = yield stat(filePath);
            if (!entry.isFile()) {
                return undefined;
            }
            if (ext && path_1.default.extname(file) !== ext) {
                return undefined;
            }
            return {
                name: file,
                path: filePath,
            };
        })))).filter(Boolean);
    });
}
exports.getDirContent = getDirContent;
