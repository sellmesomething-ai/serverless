"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkLegacyConfig = exports.promptForContinue = exports.printConfigWarning = void 0;
const common_tags_1 = require("common-tags");
const inquirer_1 = __importDefault(require("inquirer"));
const path_1 = __importDefault(require("path"));
const fs_1 = require("../utils/fs");
const logger_1 = require("../utils/logger");
function printConfigWarning() {
    const title = 'Legacy Configuration Detected';
    const msg = (0, common_tags_1.stripIndent) `
    We found a .twilio-functions file in your project. This file is incompatible with the current version of the CLI you are using and will be ignored.

    In most cases you will be able to delete the existing .twilio-functions file. If you have any configuration/modifications you did to the file yourself, head over to https://twil.io/serverlessv3 to learn how to migrate your configuration.
  `;
    logger_1.logger.warn(msg, title);
}
exports.printConfigWarning = printConfigWarning;
function promptForContinue() {
    return __awaiter(this, void 0, void 0, function* () {
        const answers = yield inquirer_1.default.prompt([
            {
                name: 'continue',
                type: 'confirm',
                default: true,
                message: 'Do you want to continue with the ignored configuration?',
            },
        ]);
        return answers.continue;
    });
}
exports.promptForContinue = promptForContinue;
/**
 * This function checks if there is a .twilio-functions file in the project and prints a warning and an optional continue prompt.
 *
 * **Only checks** in the current working directory because it's being executed at the beginning of the script.
 *
 * @export
 */
function checkLegacyConfig(cwd = process.cwd(), shouldPrompt = true) {
    return __awaiter(this, void 0, void 0, function* () {
        const legacyFilePath = path_1.default.resolve(cwd, '.twilio-functions');
        if ((0, fs_1.fileExistsSync)(legacyFilePath)) {
            printConfigWarning();
            if (shouldPrompt) {
                return promptForContinue();
            }
            else {
                return true;
            }
        }
        else {
            return true;
        }
    });
}
exports.checkLegacyConfig = checkLegacyConfig;
exports.default = checkLegacyConfig;
