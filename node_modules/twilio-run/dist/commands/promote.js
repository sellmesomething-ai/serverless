"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.builder = exports.describe = exports.command = exports.cliInfo = exports.handler = void 0;
const serverless_api_1 = require("@twilio-labs/serverless-api");
const check_credentials_1 = require("../checks/check-credentials");
const legacy_config_1 = __importDefault(require("../checks/legacy-config"));
const promote_1 = require("../config/promote");
const flags_1 = require("../flags");
const activate_1 = require("../printers/activate");
const logger_1 = require("../utils/logger");
const debug = (0, logger_1.getDebugFunction)('twilio-run:promote');
function logError(msg) {
    logger_1.logger.error(msg);
}
function handleError(err, spinner) {
    debug('%O', err);
    if (spinner) {
        if (err.name === 'TwilioApiError') {
            spinner.fail('Failed promoting build.');
            const clientApiError = err;
            if (clientApiError.code === 20409) {
                clientApiError.message +=
                    '\n\nThis is probably because you are trying to promote a build to an environment where it is already live. Try promoting the build to a different environment or choosing a different build to promote to this environment.';
            }
            (0, logger_1.logApiError)(logger_1.logger, clientApiError);
        }
        else {
            spinner.fail(err.message);
        }
    }
    process.exit(1);
}
function handler(flags, externalCliOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, logger_1.setLogLevelByName)(flags.logLevel);
        const continueWork = yield (0, legacy_config_1.default)(flags.cwd);
        if (!continueWork) {
            process.exit(1);
        }
        let config;
        try {
            config = yield (0, promote_1.getConfigFromFlags)(flags, externalCliOptions);
        }
        catch (err) {
            debug(err);
            logError(err.message);
            process.exit(1);
            return;
        }
        if (!config) {
            logError('Internal Error');
            process.exit(1);
            return;
        }
        (0, check_credentials_1.checkConfigForCredentials)(config);
        (0, activate_1.printActivateConfig)(config, config.outputFormat);
        const details = config.buildSid
            ? `(${config.buildSid})`
            : `from ${config.sourceEnvironment}`;
        const spinner = (0, logger_1.getOraSpinner)(`Activating build ${details} to ${config.targetEnvironment || 'production'}`).start();
        try {
            const client = new serverless_api_1.TwilioServerlessApiClient(config);
            const result = yield client.activateBuild(config);
            spinner.succeed(`Activated new build ${details} on ${config.targetEnvironment || 'production'}`);
            (0, activate_1.printActivateResult)(result, config.outputFormat);
        }
        catch (err) {
            handleError(err, spinner);
        }
    });
}
exports.handler = handler;
exports.cliInfo = {
    options: Object.assign({}, (0, flags_1.getRelevantFlags)([
        ...flags_1.BASE_CLI_FLAG_NAMES,
        ...flags_1.BASE_API_FLAG_NAMES,
        'service-sid',
        'build-sid',
        'source-environment',
        'environment',
        'production',
        'create-environment',
        'force',
        'env',
        'output-format',
    ])),
};
function optionBuilder(yargs) {
    yargs = yargs
        .example('$0 promote --environment=prod --source-environment=dev  ', 'Promotes the same build that is on the "dev" environment to the "prod" environment')
        .example('$0 promote --to=prod --from=dev  ', 'Promotes the same build that is on the "dev" environment to the "prod" environment')
        .example('$0 promote --environment=demo --create-environment --build-sid=ZB1234xxxxxxxxxx', 'Duplicates an existing build to a new environment called `demo`')
        .example('$0 promote --to=demo --create-environment --from-build=ZB1234xxxxxxxxxx', 'Duplicates an existing build to a new environment called `demo`');
    yargs = Object.keys(exports.cliInfo.options).reduce((yargs, name) => {
        return yargs.option(name, exports.cliInfo.options[name]);
    }, yargs);
    return yargs;
}
exports.command = ['promote', 'activate'];
exports.describe = 'Promotes an existing deployment to a new environment';
exports.builder = optionBuilder;
