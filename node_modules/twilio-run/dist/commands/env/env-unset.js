"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.builder = exports.describe = exports.command = exports.cliInfo = exports.handler = void 0;
const serverless_api_1 = require("@twilio-labs/serverless-api");
const check_credentials_1 = require("../../checks/check-credentials");
const check_service_sid_1 = __importDefault(require("../../checks/check-service-sid"));
const legacy_config_1 = __importDefault(require("../../checks/legacy-config"));
const env_get_1 = require("../../config/env/env-get");
const flags_1 = require("../../flags");
const logger_1 = require("../../utils/logger");
const utils_1 = require("../utils");
const debug = (0, logger_1.getDebugFunction)('twilio-run:env:unset');
function handleError(err) {
    debug('%O', err);
    if (err.name === 'TwilioApiError') {
        (0, logger_1.logApiError)(logger_1.logger, err);
    }
    else {
        logger_1.logger.error(err.message);
    }
    process.exit(1);
}
function handler(flags, externalCliOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, logger_1.setLogLevelByName)(flags.logLevel);
        yield (0, legacy_config_1.default)(flags.cwd, false);
        let config;
        try {
            config = yield (0, env_get_1.getConfigFromFlags)(flags, externalCliOptions);
        }
        catch (err) {
            debug(err);
            logger_1.logger.error(err.message);
            process.exit(1);
            return;
        }
        if (!config) {
            logger_1.logger.error('Internal Error');
            process.exit(1);
        }
        (0, check_credentials_1.checkConfigForCredentials)(config);
        const command = (0, utils_1.getFullCommand)(flags);
        (0, check_service_sid_1.default)(command, config.serviceSid);
        try {
            const client = new serverless_api_1.TwilioServerlessApiClient(config);
            yield client.removeEnvironmentVariables(config);
            logger_1.logger.info(`${flags.key} has been deleted`);
        }
        catch (err) {
            handleError(err);
        }
    });
}
exports.handler = handler;
exports.cliInfo = {
    options: Object.assign({}, (0, flags_1.getRelevantFlags)([
        ...flags_1.BASE_CLI_FLAG_NAMES,
        ...flags_1.BASE_API_FLAG_NAMES,
        'service-sid',
        'environment',
        'key',
        'production',
    ])),
};
function optionBuilder(yargs) {
    yargs = Object.keys(exports.cliInfo.options).reduce((yargs, name) => {
        return yargs.option(name, exports.cliInfo.options[name]);
    }, yargs);
    return yargs;
}
exports.command = ['unset'];
exports.describe = 'Removes an environment variable for a given key';
exports.builder = optionBuilder;
