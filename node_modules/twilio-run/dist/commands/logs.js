"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.builder = exports.describe = exports.command = exports.cliInfo = exports.handler = void 0;
const serverless_api_1 = require("@twilio-labs/serverless-api");
const check_credentials_1 = require("../checks/check-credentials");
const check_service_sid_1 = __importDefault(require("../checks/check-service-sid"));
const legacy_config_1 = __importDefault(require("../checks/legacy-config"));
const logs_1 = require("../config/logs");
const flags_1 = require("../flags");
const logs_2 = require("../printers/logs");
const logger_1 = require("../utils/logger");
const utils_1 = require("./utils");
const debug = (0, logger_1.getDebugFunction)('twilio-run:logs');
function logError(msg) {
    logger_1.logger.error(msg);
}
function handleError(err) {
    debug('%O', err);
    if (err.name === 'TwilioApiError') {
        (0, logger_1.logApiError)(logger_1.logger, err);
    }
    else {
        logError(err.message);
    }
    process.exit(1);
}
function handler(flags, externalCliOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, logger_1.setLogLevelByName)(flags.logLevel);
        yield (0, legacy_config_1.default)(flags.cwd, false);
        let config;
        try {
            config = yield (0, logs_1.getConfigFromFlags)(flags, externalCliOptions);
        }
        catch (err) {
            debug(err);
            logError(err.message);
            process.exit(1);
            return;
        }
        if (!config) {
            logError('Internal Error');
            process.exit(1);
            return;
        }
        (0, check_credentials_1.checkConfigForCredentials)(config);
        const command = (0, utils_1.getFullCommand)(flags);
        (0, check_service_sid_1.default)(command, config.serviceSid);
        try {
            const client = new serverless_api_1.TwilioServerlessApiClient(config);
            if (flags.tail) {
                const stream = yield client.getLogsStream(Object.assign({}, config));
                stream.on('data', (log) => {
                    (0, logs_2.printLog)(log, config.outputFormat);
                });
            }
            else {
                const result = (yield client.getLogs(Object.assign({}, config)));
                (0, logs_2.printLogs)(result, config, config.outputFormat);
            }
        }
        catch (err) {
            handleError(err);
        }
    });
}
exports.handler = handler;
exports.cliInfo = {
    options: Object.assign(Object.assign({}, (0, flags_1.getRelevantFlags)([
        ...flags_1.BASE_CLI_FLAG_NAMES,
        ...flags_1.BASE_API_FLAG_NAMES,
        'service-sid',
        'function-sid',
        'tail',
        'output-format',
        'log-cache-size',
        'production',
    ])), { environment: Object.assign(Object.assign({}, flags_1.ALL_FLAGS['environment']), { describe: 'The environment to retrieve the logs for', default: 'dev' }), production: Object.assign(Object.assign({}, flags_1.ALL_FLAGS['production']), { describe: 'Retrieve logs for the production environment. Overrides the "environment" flag' }) }),
};
function optionBuilder(yargs) {
    yargs = yargs
        .example('$0 logs', 'Prints the last 50 logs for the current project in the dev environment')
        .example('$0 logs --environment=stage', 'Prints the last 50 logs for the current project in the stage environment')
        .example('$0 logs --tail', 'Tails and prints the logs of the current project')
        .example('$0 logs --function-sid=ZFXXX', 'Only prints the logs from the named function');
    yargs = Object.keys(exports.cliInfo.options).reduce((yargs, name) => {
        return yargs.option(name, exports.cliInfo.options[name]);
    }, yargs);
    return yargs;
}
exports.command = ['logs'];
exports.describe = 'Print logs from your Twilio Serverless project';
exports.builder = optionBuilder;
