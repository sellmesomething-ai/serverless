"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalDevelopmentServer = void 0;
const body_parser_1 = __importDefault(require("body-parser"));
const events_1 = require("events");
const express_1 = __importDefault(require("express"));
const express_useragent_1 = __importDefault(require("express-useragent"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const nocache_1 = __importDefault(require("nocache"));
const request_logger_1 = require("./internal/request-logger");
const route_cache_1 = require("./internal/route-cache");
const route_1 = require("./route");
const debug_1 = __importDefault(require("./utils/debug"));
const error_html_1 = require("./utils/error-html");
const log = debug_1.default('twilio-runtime-handler:dev:server');
const DEFAULT_PORT = process.env.PORT || 3000;
const RELOAD_DEBOUNCE_MS = 250;
const DEFAULT_BODY_SIZE_LAMBDA = '6mb';
function loadTwilioFunction(fnPath) {
    return require(fnPath).handler;
}
function requireCacheCleaner(req, res, next) {
    log('Deleting require cache');
    Object.keys(require.cache).forEach((key) => {
        // Entries in the cache that end with .node are compiled binaries, deleting
        // those has unspecified results, so we keep them.
        // Entries in the cache that include "twilio-run" are part of this module
        // or its dependencies, so don't need to be cleared.
        if (!(key.endsWith('.node') || key.includes('twilio-run'))) {
            delete require.cache[key];
        }
    });
    next();
}
class LocalDevelopmentServer extends events_1.EventEmitter {
    constructor(port = DEFAULT_PORT, config) {
        var _a;
        super();
        this.port = port;
        this.config = config;
        this.routeMap = new Map();
        this.normalizeConfig = () => {
            this.config = Object.assign(Object.assign({}, this.config), { url: this.config.url || `http://localhost:${this.port}`, baseDir: this.config.baseDir || process.cwd() });
        };
        this.logFunction = (msg) => {
            this.emit('request-log', msg);
        };
        this.setRoutes = (routes) => {
            this.routes = routes;
            this.routeMap = route_cache_1.setRoutes(this.routes);
        };
        this.createServer = () => {
            log('Creating server with config: %p', this.config);
            const app = express_1.default();
            app.use(express_useragent_1.default.express());
            app.use(body_parser_1.default.urlencoded({
                extended: false,
                limit: DEFAULT_BODY_SIZE_LAMBDA,
            }));
            app.use(body_parser_1.default.json({ limit: DEFAULT_BODY_SIZE_LAMBDA }));
            app.use(cookie_parser_1.default());
            app.get('/favicon.ico', (req, res) => {
                res.redirect('https://www.twilio.com/marketing/bundles/marketing/img/favicons/favicon.ico');
            });
            if (this.config.logs) {
                app.use(request_logger_1.createLogger(this.logFunction));
            }
            if (this.config.live) {
                app.use(nocache_1.default());
                app.use(requireCacheCleaner);
            }
            if (this.config.legacyMode) {
                process.env.TWILIO_FUNCTIONS_LEGACY_MODE = this.config.legacyMode
                    ? 'true'
                    : undefined;
                log('Legacy mode enabled');
                app.use('/assets/*', (req, res, next) => {
                    req.path = req.path.replace('/assets/', '/');
                    next();
                });
            }
            route_1.constructGlobalScope(this.config);
            app.set('port', this.port);
            app.all('/*', (req, res, next) => {
                let routeInfo = this.routeMap.get(req.path);
                if (!routeInfo && req.path === '/') {
                    log('Falling back to /assets/index.html');
                    // In production we automatically fall back to the contents of /assets/index.html
                    routeInfo = this.routeMap.get('/assets/index.html');
                }
                if (req.method === 'OPTIONS' && routeInfo) {
                    res.set({
                        'access-control-allow-origin': '*',
                        'access-control-allow-headers': 'Accept, Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, User-Agent',
                        'access-control-allow-methods': 'GET, POST, OPTIONS',
                        'access-control-expose-headers': 'ETag',
                        'access-control-max-age': '86400',
                        'access-control-allow-credentials': true,
                        'content-type': 'text/plain; charset=UTF-8',
                        'content-length': '0',
                    });
                    res.status(204).end();
                    return;
                }
                if (routeInfo && routeInfo.type === 'function') {
                    const functionPath = routeInfo.filePath;
                    try {
                        if (!functionPath) {
                            throw new Error('Missing function path');
                        }
                        if (this.config.forkProcess) {
                            route_1.functionPathToRoute(functionPath, this.config)(req, res, next);
                        }
                        else {
                            log('Load & route to function at "%s"', functionPath);
                            const twilioFunction = loadTwilioFunction(functionPath);
                            if (typeof twilioFunction !== 'function') {
                                return res
                                    .status(404)
                                    .send(`Could not find a "handler" function in file ${functionPath}`);
                            }
                            route_1.functionToRoute(twilioFunction, this.config, functionPath)(req, res, next);
                        }
                    }
                    catch (err) {
                        log('Failed to retrieve function. %O', err);
                        if (err.code === 'ENOENT') {
                            res.status(404).send(`Could not find function ${functionPath}`);
                        }
                        else {
                            res.status(500).send(error_html_1.wrapErrorInHtml(err, functionPath));
                        }
                    }
                }
                else if (routeInfo && routeInfo.type === 'asset') {
                    if (routeInfo.filePath) {
                        if (routeInfo.access === 'private') {
                            res.status(403).send('This asset has been marked as private');
                        }
                        else {
                            res.sendFile(routeInfo.filePath);
                        }
                    }
                    else {
                        res.status(404).send('Could not find asset');
                    }
                }
                else {
                    res.status(404).send('Could not find requested resource');
                }
            });
            return app;
        };
        this.listen = () => {
            return new Promise((resolve, reject) => {
                if (typeof this.app === 'undefined') {
                    reject(new Error('Unexpected error. Server did not exist.'));
                    return;
                }
                this.app.listen(this.port, () => {
                    log('Server is listening.');
                    resolve(this.app);
                });
            });
        };
        this.getApp = () => {
            return this.app;
        };
        this.update = (routes) => {
            this.setRoutes(routes);
            this.emit('updated-routes', this.config, this.routes);
        };
        if (this.config.enableDebugLogs) {
            debug_1.default.enable('twilio-runtime-handler:*');
        }
        log('Creating Local Development Server');
        log('@twilio/runtime-handler version: %s', (_a = require('../../package.json')) === null || _a === void 0 ? void 0 : _a.version);
        this.normalizeConfig();
        this.routes = this.config.routes;
        this.setRoutes(this.config.routes);
        this.app = this.createServer();
    }
}
exports.LocalDevelopmentServer = LocalDevelopmentServer;
