"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.functionToRoute = exports.functionPathToRoute = exports.handleSuccess = exports.isTwiml = exports.handleError = exports.constructGlobalScope = exports.constructContext = exports.augmentContextWithOptionals = exports.constructEvent = exports.constructHeaders = void 0;
const chalk_1 = __importDefault(require("chalk"));
const child_process_1 = require("child_process");
const path_1 = require("path");
const serialize_error_1 = require("serialize-error");
const check_account_sid_1 = require("./checks/check-account-sid");
const check_auth_token_1 = require("./checks/check-auth-token");
const restricted_headers_1 = require("./checks/restricted-headers");
const response_1 = require("./internal/response");
const Runtime = __importStar(require("./internal/runtime"));
const debug_1 = __importDefault(require("./utils/debug"));
const error_html_1 = require("./utils/error-html");
const getCodeLocation_1 = require("./utils/getCodeLocation");
const requireFromProject_1 = require("./utils/requireFromProject");
const clean_up_1 = require("./utils/stack-trace/clean-up");
const log = debug_1.default('twilio-runtime-handler:dev:route');
const RUNNER_PATH = process.env.NODE_ENV === 'test'
    ? path_1.resolve(__dirname, '../../dist/dev-runtime/internal/functionRunner')
    : path_1.join(__dirname, 'internal', 'functionRunner');
let twilio;
function constructHeaders(rawHeaders) {
    if (rawHeaders && rawHeaders.length > 0) {
        const headers = {};
        for (let i = 0, len = rawHeaders.length; i < len; i += 2) {
            const headerName = rawHeaders[i].toLowerCase();
            if (restricted_headers_1.restrictedHeaderExactMatches.some((headerType) => headerName === headerType) ||
                restricted_headers_1.restrictedHeaderPrefixes.some((headerType) => headerName.startsWith(headerType))) {
                continue;
            }
            const currentHeader = headers[headerName];
            if (!currentHeader) {
                headers[headerName] = rawHeaders[i + 1];
            }
            else if (typeof currentHeader === 'string') {
                headers[headerName] = [currentHeader, rawHeaders[i + 1]];
            }
            else {
                headers[headerName] = [...currentHeader, rawHeaders[i + 1]];
            }
        }
        return headers;
    }
    return {};
}
exports.constructHeaders = constructHeaders;
function constructEvent(req) {
    return Object.assign(Object.assign({ request: {
            headers: constructHeaders(req.rawHeaders),
            cookies: (req.cookies || {}),
        } }, req.query), req.body);
}
exports.constructEvent = constructEvent;
function augmentContextWithOptionals(config, context) {
    log('Adding getters with warnings to optional properties');
    if (typeof context.SERVICE_SID === 'undefined') {
        let _serviceSid = undefined;
        Object.defineProperty(context, 'SERVICE_SID', {
            get: () => {
                if (_serviceSid === undefined) {
                    console.warn(chalk_1.default `{bold.yellow WARNING} at ${getCodeLocation_1.getCodeLocation({
                        relativeFrom: config.baseDir,
                        offset: 1,
                    })} The SERVICE_SID variable is undefined by default in local development. This variable will be autopopulated when your Functions get deployed. Learn more at: https://twil.io/toolkit-variables`);
                }
                return _serviceSid;
            },
            set: (value) => {
                _serviceSid = value;
            },
        });
    }
    if (typeof context.ENVIRONMENT_SID === 'undefined') {
        let _environmentSid = undefined;
        Object.defineProperty(context, 'ENVIRONMENT_SID', {
            get: () => {
                if (_environmentSid === undefined) {
                    console.warn(chalk_1.default `{bold.yellow WARNING} at ${getCodeLocation_1.getCodeLocation({
                        relativeFrom: config.baseDir,
                        offset: 1,
                    })}: The ENVIRONMENT_SID variable is undefined by default in local development. This variable will be autopopulated when your Functions get deployed. Learn more at: https://twil.io/toolkit-variables`);
                }
                return _environmentSid;
            },
            set: (value) => {
                _environmentSid = value;
            },
        });
    }
    return context;
}
exports.augmentContextWithOptionals = augmentContextWithOptionals;
function constructContext({ url, env, logger, baseDir }, functionPath) {
    function getTwilioClient(opts) {
        check_account_sid_1.checkForValidAccountSid(env.ACCOUNT_SID, {
            shouldPrintMessage: true,
            shouldThrowError: true,
            functionName: 'context.getTwilioClient()',
            logger: logger,
        });
        check_auth_token_1.checkForValidAuthToken(env.AUTH_TOKEN, {
            shouldPrintMessage: true,
            shouldThrowError: true,
            functionName: 'context.getTwilioClient()',
            logger: logger,
        });
        return requireFromProject_1.requireFromProject(baseDir, 'twilio', true)(env.ACCOUNT_SID, env.AUTH_TOKEN, Object.assign({ lazyLoading: true }, opts));
    }
    const DOMAIN_NAME = url.replace(/^https?:\/\//, '');
    const PATH = functionPath;
    const context = Object.assign(Object.assign({ PATH,
        DOMAIN_NAME, SERVICE_SID: undefined, ENVIRONMENT_SID: undefined }, env), { getTwilioClient });
    return context;
}
exports.constructContext = constructContext;
function constructGlobalScope(config) {
    twilio = requireFromProject_1.requireFromProject(config.baseDir, 'twilio', true);
    const GlobalRuntime = Runtime.create(config);
    global['Twilio'] = Object.assign(Object.assign({}, twilio), { Response: response_1.Response });
    global['Runtime'] = GlobalRuntime;
    global['Functions'] = GlobalRuntime.getFunctions();
    global['Response'] = response_1.Response;
    if (check_account_sid_1.checkForValidAccountSid(config.env.ACCOUNT_SID) &&
        config.env.AUTH_TOKEN) {
        global['twilioClient'] = new twilio.Twilio(config.env.ACCOUNT_SID, config.env.AUTH_TOKEN, {
            lazyLoading: true,
        });
    }
}
exports.constructGlobalScope = constructGlobalScope;
function isError(obj) {
    return obj instanceof Error;
}
function handleError(err, req, res, functionFilePath) {
    res.status(500);
    if (isError(err)) {
        const cleanedupError = clean_up_1.cleanUpStackTrace(err);
        if (req.useragent && (req.useragent.isDesktop || req.useragent.isMobile)) {
            res.type('text/html');
            res.send(error_html_1.wrapErrorInHtml(cleanedupError, functionFilePath));
        }
        else {
            res.send({
                message: cleanedupError.message,
                name: cleanedupError.name,
                stack: cleanedupError.stack,
            });
        }
    }
    else {
        res.send(err);
    }
}
exports.handleError = handleError;
function isTwiml(obj) {
    if (!twilio) {
        log('Unexpected call of isTwiml. Require twilio manual');
        twilio = require('twilio');
    }
    const { VoiceResponse, MessagingResponse, FaxResponse } = twilio.twiml;
    const isVoiceTwiml = obj instanceof VoiceResponse;
    const isMessagingTwiml = obj instanceof MessagingResponse;
    const isFaxTwiml = obj instanceof FaxResponse;
    return isVoiceTwiml || isMessagingTwiml || isFaxTwiml;
}
exports.isTwiml = isTwiml;
function handleSuccess(responseObject, res) {
    res.status(200);
    if (typeof responseObject === 'string') {
        log('Sending basic string response');
        res.type('text/plain').send(responseObject);
        return;
    }
    if (responseObject &&
        typeof responseObject === 'object' &&
        isTwiml(responseObject)) {
        log('Sending TwiML response as XML string');
        res.type('text/xml').send(responseObject.toString());
        return;
    }
    if (responseObject && responseObject instanceof response_1.Response) {
        log('Sending custom response');
        responseObject.applyToExpressResponse(res);
        return;
    }
    log('Sending JSON response');
    res.send(responseObject);
}
exports.handleSuccess = handleSuccess;
function functionPathToRoute(functionPath, config) {
    return function twilioFunctionHandler(req, res, next) {
        const event = constructEvent(req);
        const forked = child_process_1.fork(RUNNER_PATH);
        forked.on('message', ({ err, reply, debugMessage, debugArgs = [], }) => {
            if (debugMessage) {
                log(debugMessage, ...debugArgs);
                return;
            }
            if (err) {
                const error = serialize_error_1.deserializeError(err);
                handleError(error, req, res, functionPath);
            }
            if (reply) {
                res.status(reply.statusCode);
                res.set(reply.headers);
                res.send(reply.body);
            }
            forked.kill();
        });
        forked.send({ functionPath, event, config, path: req.path });
    };
}
exports.functionPathToRoute = functionPathToRoute;
function functionToRoute(fn, config, functionFilePath) {
    return function twilioFunctionHandler(req, res, next) {
        const event = constructEvent(req);
        log('Event for %s: %o', req.path, event);
        const context = constructContext(config, req.path);
        log('Context for %s: %p', req.path, context);
        let run_timings = {
            start: [0, 0],
            end: [0, 0],
        };
        const callback = function callback(err, payload) {
            run_timings.end = process.hrtime();
            log('Function execution %s finished', req.path);
            log(`(Estimated) Total Execution Time: ${(run_timings.end[0] * 1e9 +
                run_timings.end[1] -
                (run_timings.start[0] * 1e9 + run_timings.start[1])) /
                1e6}ms`);
            if (err) {
                handleError(err, req, res, functionFilePath);
                return;
            }
            handleSuccess(payload, res);
        };
        log('Calling function for %s', req.path);
        try {
            run_timings.start = process.hrtime();
            fn(context, event, callback);
        }
        catch (err) {
            callback(err);
        }
    };
}
exports.functionToRoute = functionToRoute;
