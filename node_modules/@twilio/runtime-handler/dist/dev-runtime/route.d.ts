import { Context, ServerlessEventObject, ServerlessFunctionSignature } from '@twilio-labs/serverless-runtime-types/types';
import { NextFunction, Request as ExpressRequest, RequestHandler as ExpressRequestHandler, Response as ExpressResponse } from 'express';
import { ServerConfig } from './types';
declare type Headers = {
    [key: string]: string | string[];
};
export declare function constructHeaders(rawHeaders?: string[]): Headers;
export declare function constructEvent<T extends ServerlessEventObject>(req: ExpressRequest): T;
export declare function augmentContextWithOptionals(config: ServerConfig, context: Context): Context<{
    ACCOUNT_SID?: string;
    AUTH_TOKEN?: string;
    DOMAIN_NAME: string;
    PATH: string;
    SERVICE_SID: string | undefined;
    ENVIRONMENT_SID: string | undefined;
    [key: string]: string | undefined | Function;
}>;
export declare function constructContext<T extends {} = {}>({ url, env, logger, baseDir }: ServerConfig, functionPath: string): Context<{
    ACCOUNT_SID?: string;
    AUTH_TOKEN?: string;
    DOMAIN_NAME: string;
    PATH: string;
    [key: string]: string | undefined | Function;
}>;
export declare function constructGlobalScope(config: ServerConfig): void;
export declare function handleError(err: Error | string | object, req: ExpressRequest, res: ExpressResponse, functionFilePath?: string): void;
export declare function isTwiml(obj: object): boolean;
export declare function handleSuccess(responseObject: string | number | boolean | object | undefined, res: ExpressResponse): void;
export declare function functionPathToRoute(functionPath: string, config: ServerConfig): (req: ExpressRequest, res: ExpressResponse, next: NextFunction) => void;
export declare function functionToRoute(fn: ServerlessFunctionSignature, config: ServerConfig, functionFilePath?: string): ExpressRequestHandler;
export {};
